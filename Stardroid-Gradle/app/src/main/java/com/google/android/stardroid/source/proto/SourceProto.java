// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source.proto

package com.google.android.stardroid.source.proto;

public final class SourceProto {
    private SourceProto() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public enum Shape
            implements com.google.protobuf.Internal.EnumLite {
        CIRCLE(0, 0),
        STAR(1, 1),
        ELLIPTICAL_GALAXY(2, 2),
        SPIRAL_GALAXY(3, 3),
        IRREGULAR_GALAXY(4, 4),
        LENTICULAR_GALAXY(5, 5),
        GLOBULAR_CLUSTER(6, 6),
        OPEN_CLUSTER(7, 7),
        NEBULA(8, 8),
        HUBBLE_DEEP_FIELD(9, 9),;


        public final int getNumber() {
            return value;
        }

        public static Shape valueOf(int value) {
            switch (value) {
                case 0:
                    return CIRCLE;
                case 1:
                    return STAR;
                case 2:
                    return ELLIPTICAL_GALAXY;
                case 3:
                    return SPIRAL_GALAXY;
                case 4:
                    return IRREGULAR_GALAXY;
                case 5:
                    return LENTICULAR_GALAXY;
                case 6:
                    return GLOBULAR_CLUSTER;
                case 7:
                    return OPEN_CLUSTER;
                case 8:
                    return NEBULA;
                case 9:
                    return HUBBLE_DEEP_FIELD;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Shape>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<Shape>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<Shape>() {
                    public Shape findValueByNumber(int number) {
                        return Shape.valueOf(number)
                                ;
                    }
                };

        private final int index;
        private final int value;

        private Shape(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:stardroid_source.Shape)
    }

    public static final class GeocentricCoordinatesProto extends
            com.google.protobuf.GeneratedMessageLite {
        // Use GeocentricCoordinatesProto.newBuilder() to construct.
        private GeocentricCoordinatesProto() {
            initFields();
        }

        private GeocentricCoordinatesProto(boolean noInit) {
        }

        private static final GeocentricCoordinatesProto defaultInstance;

        public static GeocentricCoordinatesProto getDefaultInstance() {
            return defaultInstance;
        }

        public GeocentricCoordinatesProto getDefaultInstanceForType() {
            return defaultInstance;
        }

        // optional float right_ascension = 1;
        public static final int RIGHT_ASCENSION_FIELD_NUMBER = 1;
        private boolean hasRightAscension;
        private float rightAscension_ = 0F;

        public boolean hasRightAscension() {
            return hasRightAscension;
        }

        public float getRightAscension() {
            return rightAscension_;
        }

        // optional float declination = 2;
        public static final int DECLINATION_FIELD_NUMBER = 2;
        private boolean hasDeclination;
        private float declination_ = 0F;

        public boolean hasDeclination() {
            return hasDeclination;
        }

        public float getDeclination() {
            return declination_;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (hasRightAscension()) {
                output.writeFloat(1, getRightAscension());
            }
            if (hasDeclination()) {
                output.writeFloat(2, getDeclination());
            }
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasRightAscension()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(1, getRightAscension());
            }
            if (hasDeclination()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(2, getDeclination());
            }
            memoizedSerializedSize = size;
            return size;
        }

        public static GeocentricCoordinatesProto parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static GeocentricCoordinatesProto parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static GeocentricCoordinatesProto parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static GeocentricCoordinatesProto parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static GeocentricCoordinatesProto parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static GeocentricCoordinatesProto parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static GeocentricCoordinatesProto parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static GeocentricCoordinatesProto parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static GeocentricCoordinatesProto parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static GeocentricCoordinatesProto parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GeocentricCoordinatesProto prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        GeocentricCoordinatesProto, Builder> {
            private GeocentricCoordinatesProto result;

            // Construct using com.google.android.stardroid.source.proto.SourceProto.GeocentricCoordinatesProto.newBuilder()
            private Builder() {
            }

            private static Builder create() {
                Builder builder = new Builder();
                builder.result = new GeocentricCoordinatesProto();
                return builder;
            }

            protected GeocentricCoordinatesProto internalGetResult() {
                return result;
            }

            public Builder clear() {
                if (result == null) {
                    throw new IllegalStateException(
                            "Cannot call clear() after build().");
                }
                result = new GeocentricCoordinatesProto();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(result);
            }

            public GeocentricCoordinatesProto getDefaultInstanceForType() {
                return GeocentricCoordinatesProto.getDefaultInstance();
            }

            public boolean isInitialized() {
                return result.isInitialized();
            }

            public GeocentricCoordinatesProto build() {
                if (result != null && !isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return buildPartial();
            }

            private GeocentricCoordinatesProto buildParsed()
                    throws com.google.protobuf.InvalidProtocolBufferException {
                if (!isInitialized()) {
                    throw newUninitializedMessageException(
                            result).asInvalidProtocolBufferException();
                }
                return buildPartial();
            }

            public GeocentricCoordinatesProto buildPartial() {
                if (result == null) {
                    throw new IllegalStateException(
                            "build() has already been called on this Builder.");
                }
                GeocentricCoordinatesProto returnMe = result;
                result = null;
                return returnMe;
            }

            public Builder mergeFrom(GeocentricCoordinatesProto other) {
                if (other == GeocentricCoordinatesProto.getDefaultInstance()) return this;
                if (other.hasRightAscension()) {
                    setRightAscension(other.getRightAscension());
                }
                if (other.hasDeclination()) {
                    setDeclination(other.getDeclination());
                }
                return this;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                while (true) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            return this;
                        default: {
                            if (!parseUnknownField(input, extensionRegistry, tag)) {
                                return this;
                            }
                            break;
                        }
                        case 13: {
                            setRightAscension(input.readFloat());
                            break;
                        }
                        case 21: {
                            setDeclination(input.readFloat());
                            break;
                        }
                    }
                }
            }


            // optional float right_ascension = 1;
            public boolean hasRightAscension() {
                return result.hasRightAscension();
            }

            public float getRightAscension() {
                return result.getRightAscension();
            }

            public Builder setRightAscension(float value) {
                result.hasRightAscension = true;
                result.rightAscension_ = value;
                return this;
            }

            public Builder clearRightAscension() {
                result.hasRightAscension = false;
                result.rightAscension_ = 0F;
                return this;
            }

            // optional float declination = 2;
            public boolean hasDeclination() {
                return result.hasDeclination();
            }

            public float getDeclination() {
                return result.getDeclination();
            }

            public Builder setDeclination(float value) {
                result.hasDeclination = true;
                result.declination_ = value;
                return this;
            }

            public Builder clearDeclination() {
                result.hasDeclination = false;
                result.declination_ = 0F;
                return this;
            }

            // @@protoc_insertion_point(builder_scope:stardroid_source.GeocentricCoordinatesProto)
        }

        static {
            defaultInstance = new GeocentricCoordinatesProto(true);
            SourceProto.internalForceInit();
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:stardroid_source.GeocentricCoordinatesProto)
    }

    public static final class PointElementProto extends
            com.google.protobuf.GeneratedMessageLite {
        // Use PointElementProto.newBuilder() to construct.
        private PointElementProto() {
            initFields();
        }

        private PointElementProto(boolean noInit) {
        }

        private static final PointElementProto defaultInstance;

        public static PointElementProto getDefaultInstance() {
            return defaultInstance;
        }

        public PointElementProto getDefaultInstanceForType() {
            return defaultInstance;
        }

        // optional .stardroid_source.GeocentricCoordinatesProto location = 1;
        public static final int LOCATION_FIELD_NUMBER = 1;
        private boolean hasLocation;
        private GeocentricCoordinatesProto location_;

        public boolean hasLocation() {
            return hasLocation;
        }

        public GeocentricCoordinatesProto getLocation() {
            return location_;
        }

        // optional uint32 color = 2 [default = 4294967295];
        public static final int COLOR_FIELD_NUMBER = 2;
        private boolean hasColor;
        private int color_ = -1;

        public boolean hasColor() {
            return hasColor;
        }

        public int getColor() {
            return color_;
        }

        // optional int32 size = 3 [default = 3];
        public static final int SIZE_FIELD_NUMBER = 3;
        private boolean hasSize;
        private int size_ = 3;

        public boolean hasSize() {
            return hasSize;
        }

        public int getSize() {
            return size_;
        }

        // optional .stardroid_source.Shape shape = 4 [default = CIRCLE];
        public static final int SHAPE_FIELD_NUMBER = 4;
        private boolean hasShape;
        private Shape shape_;

        public boolean hasShape() {
            return hasShape;
        }

        public Shape getShape() {
            return shape_;
        }

        private void initFields() {
            location_ = GeocentricCoordinatesProto.getDefaultInstance();
            shape_ = Shape.CIRCLE;
        }

        public final boolean isInitialized() {
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (hasLocation()) {
                output.writeMessage(1, getLocation());
            }
            if (hasColor()) {
                output.writeUInt32(2, getColor());
            }
            if (hasSize()) {
                output.writeInt32(3, getSize());
            }
            if (hasShape()) {
                output.writeEnum(4, getShape().getNumber());
            }
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasLocation()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, getLocation());
            }
            if (hasColor()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, getColor());
            }
            if (hasSize()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(3, getSize());
            }
            if (hasShape()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(4, getShape().getNumber());
            }
            memoizedSerializedSize = size;
            return size;
        }

        public static PointElementProto parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static PointElementProto parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static PointElementProto parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static PointElementProto parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static PointElementProto parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static PointElementProto parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static PointElementProto parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static PointElementProto parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static PointElementProto parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static PointElementProto parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(PointElementProto prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        PointElementProto, Builder> {
            private PointElementProto result;

            // Construct using com.google.android.stardroid.source.proto.SourceProto.PointElementProto.newBuilder()
            private Builder() {
            }

            private static Builder create() {
                Builder builder = new Builder();
                builder.result = new PointElementProto();
                return builder;
            }

            protected PointElementProto internalGetResult() {
                return result;
            }

            public Builder clear() {
                if (result == null) {
                    throw new IllegalStateException(
                            "Cannot call clear() after build().");
                }
                result = new PointElementProto();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(result);
            }

            public PointElementProto getDefaultInstanceForType() {
                return PointElementProto.getDefaultInstance();
            }

            public boolean isInitialized() {
                return result.isInitialized();
            }

            public PointElementProto build() {
                if (result != null && !isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return buildPartial();
            }

            private PointElementProto buildParsed()
                    throws com.google.protobuf.InvalidProtocolBufferException {
                if (!isInitialized()) {
                    throw newUninitializedMessageException(
                            result).asInvalidProtocolBufferException();
                }
                return buildPartial();
            }

            public PointElementProto buildPartial() {
                if (result == null) {
                    throw new IllegalStateException(
                            "build() has already been called on this Builder.");
                }
                PointElementProto returnMe = result;
                result = null;
                return returnMe;
            }

            public Builder mergeFrom(PointElementProto other) {
                if (other == PointElementProto.getDefaultInstance()) return this;
                if (other.hasLocation()) {
                    mergeLocation(other.getLocation());
                }
                if (other.hasColor()) {
                    setColor(other.getColor());
                }
                if (other.hasSize()) {
                    setSize(other.getSize());
                }
                if (other.hasShape()) {
                    setShape(other.getShape());
                }
                return this;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                while (true) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            return this;
                        default: {
                            if (!parseUnknownField(input, extensionRegistry, tag)) {
                                return this;
                            }
                            break;
                        }
                        case 10: {
                            GeocentricCoordinatesProto.Builder subBuilder = GeocentricCoordinatesProto.newBuilder();
                            if (hasLocation()) {
                                subBuilder.mergeFrom(getLocation());
                            }
                            input.readMessage(subBuilder, extensionRegistry);
                            setLocation(subBuilder.buildPartial());
                            break;
                        }
                        case 16: {
                            setColor(input.readUInt32());
                            break;
                        }
                        case 24: {
                            setSize(input.readInt32());
                            break;
                        }
                        case 32: {
                            int rawValue = input.readEnum();
                            Shape value = Shape.valueOf(rawValue);
                            if (value != null) {
                                setShape(value);
                            }
                            break;
                        }
                    }
                }
            }


            // optional .stardroid_source.GeocentricCoordinatesProto location = 1;
            public boolean hasLocation() {
                return result.hasLocation();
            }

            public GeocentricCoordinatesProto getLocation() {
                return result.getLocation();
            }

            public Builder setLocation(GeocentricCoordinatesProto value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                result.hasLocation = true;
                result.location_ = value;
                return this;
            }

            public Builder setLocation(GeocentricCoordinatesProto.Builder builderForValue) {
                result.hasLocation = true;
                result.location_ = builderForValue.build();
                return this;
            }

            public Builder mergeLocation(GeocentricCoordinatesProto value) {
                if (result.hasLocation() &&
                        result.location_ != GeocentricCoordinatesProto.getDefaultInstance()) {
                    result.location_ =
                            GeocentricCoordinatesProto.newBuilder(result.location_).mergeFrom(value).buildPartial();
                } else {
                    result.location_ = value;
                }
                result.hasLocation = true;
                return this;
            }

            public Builder clearLocation() {
                result.hasLocation = false;
                result.location_ = GeocentricCoordinatesProto.getDefaultInstance();
                return this;
            }

            // optional uint32 color = 2 [default = 4294967295];
            public boolean hasColor() {
                return result.hasColor();
            }

            public int getColor() {
                return result.getColor();
            }

            public Builder setColor(int value) {
                result.hasColor = true;
                result.color_ = value;
                return this;
            }

            public Builder clearColor() {
                result.hasColor = false;
                result.color_ = -1;
                return this;
            }

            // optional int32 size = 3 [default = 3];
            public boolean hasSize() {
                return result.hasSize();
            }

            public int getSize() {
                return result.getSize();
            }

            public Builder setSize(int value) {
                result.hasSize = true;
                result.size_ = value;
                return this;
            }

            public Builder clearSize() {
                result.hasSize = false;
                result.size_ = 3;
                return this;
            }

            // optional .stardroid_source.Shape shape = 4 [default = CIRCLE];
            public boolean hasShape() {
                return result.hasShape();
            }

            public Shape getShape() {
                return result.getShape();
            }

            public Builder setShape(Shape value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                result.hasShape = true;
                result.shape_ = value;
                return this;
            }

            public Builder clearShape() {
                result.hasShape = false;
                result.shape_ = Shape.CIRCLE;
                return this;
            }

            // @@protoc_insertion_point(builder_scope:stardroid_source.PointElementProto)
        }

        static {
            defaultInstance = new PointElementProto(true);
            SourceProto.internalForceInit();
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:stardroid_source.PointElementProto)
    }

    public static final class LabelElementProto extends
            com.google.protobuf.GeneratedMessageLite {
        // Use LabelElementProto.newBuilder() to construct.
        private LabelElementProto() {
            initFields();
        }

        private LabelElementProto(boolean noInit) {
        }

        private static final LabelElementProto defaultInstance;

        public static LabelElementProto getDefaultInstance() {
            return defaultInstance;
        }

        public LabelElementProto getDefaultInstanceForType() {
            return defaultInstance;
        }

        // optional .stardroid_source.GeocentricCoordinatesProto location = 1;
        public static final int LOCATION_FIELD_NUMBER = 1;
        private boolean hasLocation;
        private GeocentricCoordinatesProto location_;

        public boolean hasLocation() {
            return hasLocation;
        }

        public GeocentricCoordinatesProto getLocation() {
            return location_;
        }

        // optional uint32 color = 2 [default = 4294967295];
        public static final int COLOR_FIELD_NUMBER = 2;
        private boolean hasColor;
        private int color_ = -1;

        public boolean hasColor() {
            return hasColor;
        }

        public int getColor() {
            return color_;
        }

        // optional int32 string_index = 3;
        public static final int STRING_INDEX_FIELD_NUMBER = 3;
        private boolean hasStringIndex;
        private int stringIndex_ = 0;

        public boolean hasStringIndex() {
            return hasStringIndex;
        }

        public int getStringIndex() {
            return stringIndex_;
        }

        // optional int32 font_size = 4 [default = 15];
        public static final int FONT_SIZE_FIELD_NUMBER = 4;
        private boolean hasFontSize;
        private int fontSize_ = 15;

        public boolean hasFontSize() {
            return hasFontSize;
        }

        public int getFontSize() {
            return fontSize_;
        }

        // optional float offset = 5 [default = 0.02];
        public static final int OFFSET_FIELD_NUMBER = 5;
        private boolean hasOffset;
        private float offset_ = 0.02F;

        public boolean hasOffset() {
            return hasOffset;
        }

        public float getOffset() {
            return offset_;
        }

        private void initFields() {
            location_ = GeocentricCoordinatesProto.getDefaultInstance();
        }

        public final boolean isInitialized() {
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (hasLocation()) {
                output.writeMessage(1, getLocation());
            }
            if (hasColor()) {
                output.writeUInt32(2, getColor());
            }
            if (hasStringIndex()) {
                output.writeInt32(3, getStringIndex());
            }
            if (hasFontSize()) {
                output.writeInt32(4, getFontSize());
            }
            if (hasOffset()) {
                output.writeFloat(5, getOffset());
            }
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasLocation()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, getLocation());
            }
            if (hasColor()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, getColor());
            }
            if (hasStringIndex()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(3, getStringIndex());
            }
            if (hasFontSize()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(4, getFontSize());
            }
            if (hasOffset()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(5, getOffset());
            }
            memoizedSerializedSize = size;
            return size;
        }

        public static LabelElementProto parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static LabelElementProto parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static LabelElementProto parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static LabelElementProto parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static LabelElementProto parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static LabelElementProto parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static LabelElementProto parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static LabelElementProto parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static LabelElementProto parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static LabelElementProto parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LabelElementProto prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        LabelElementProto, Builder> {
            private LabelElementProto result;

            // Construct using com.google.android.stardroid.source.proto.SourceProto.LabelElementProto.newBuilder()
            private Builder() {
            }

            private static Builder create() {
                Builder builder = new Builder();
                builder.result = new LabelElementProto();
                return builder;
            }

            protected LabelElementProto internalGetResult() {
                return result;
            }

            public Builder clear() {
                if (result == null) {
                    throw new IllegalStateException(
                            "Cannot call clear() after build().");
                }
                result = new LabelElementProto();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(result);
            }

            public LabelElementProto getDefaultInstanceForType() {
                return LabelElementProto.getDefaultInstance();
            }

            public boolean isInitialized() {
                return result.isInitialized();
            }

            public LabelElementProto build() {
                if (result != null && !isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return buildPartial();
            }

            private LabelElementProto buildParsed()
                    throws com.google.protobuf.InvalidProtocolBufferException {
                if (!isInitialized()) {
                    throw newUninitializedMessageException(
                            result).asInvalidProtocolBufferException();
                }
                return buildPartial();
            }

            public LabelElementProto buildPartial() {
                if (result == null) {
                    throw new IllegalStateException(
                            "build() has already been called on this Builder.");
                }
                LabelElementProto returnMe = result;
                result = null;
                return returnMe;
            }

            public Builder mergeFrom(LabelElementProto other) {
                if (other == LabelElementProto.getDefaultInstance()) return this;
                if (other.hasLocation()) {
                    mergeLocation(other.getLocation());
                }
                if (other.hasColor()) {
                    setColor(other.getColor());
                }
                if (other.hasStringIndex()) {
                    setStringIndex(other.getStringIndex());
                }
                if (other.hasFontSize()) {
                    setFontSize(other.getFontSize());
                }
                if (other.hasOffset()) {
                    setOffset(other.getOffset());
                }
                return this;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                while (true) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            return this;
                        default: {
                            if (!parseUnknownField(input, extensionRegistry, tag)) {
                                return this;
                            }
                            break;
                        }
                        case 10: {
                            GeocentricCoordinatesProto.Builder subBuilder = GeocentricCoordinatesProto.newBuilder();
                            if (hasLocation()) {
                                subBuilder.mergeFrom(getLocation());
                            }
                            input.readMessage(subBuilder, extensionRegistry);
                            setLocation(subBuilder.buildPartial());
                            break;
                        }
                        case 16: {
                            setColor(input.readUInt32());
                            break;
                        }
                        case 24: {
                            setStringIndex(input.readInt32());
                            break;
                        }
                        case 32: {
                            setFontSize(input.readInt32());
                            break;
                        }
                        case 45: {
                            setOffset(input.readFloat());
                            break;
                        }
                    }
                }
            }


            // optional .stardroid_source.GeocentricCoordinatesProto location = 1;
            public boolean hasLocation() {
                return result.hasLocation();
            }

            public GeocentricCoordinatesProto getLocation() {
                return result.getLocation();
            }

            public Builder setLocation(GeocentricCoordinatesProto value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                result.hasLocation = true;
                result.location_ = value;
                return this;
            }

            public Builder setLocation(GeocentricCoordinatesProto.Builder builderForValue) {
                result.hasLocation = true;
                result.location_ = builderForValue.build();
                return this;
            }

            public Builder mergeLocation(GeocentricCoordinatesProto value) {
                if (result.hasLocation() &&
                        result.location_ != GeocentricCoordinatesProto.getDefaultInstance()) {
                    result.location_ =
                            GeocentricCoordinatesProto.newBuilder(result.location_).mergeFrom(value).buildPartial();
                } else {
                    result.location_ = value;
                }
                result.hasLocation = true;
                return this;
            }

            public Builder clearLocation() {
                result.hasLocation = false;
                result.location_ = GeocentricCoordinatesProto.getDefaultInstance();
                return this;
            }

            // optional uint32 color = 2 [default = 4294967295];
            public boolean hasColor() {
                return result.hasColor();
            }

            public int getColor() {
                return result.getColor();
            }

            public Builder setColor(int value) {
                result.hasColor = true;
                result.color_ = value;
                return this;
            }

            public Builder clearColor() {
                result.hasColor = false;
                result.color_ = -1;
                return this;
            }

            // optional int32 string_index = 3;
            public boolean hasStringIndex() {
                return result.hasStringIndex();
            }

            public int getStringIndex() {
                return result.getStringIndex();
            }

            public Builder setStringIndex(int value) {
                result.hasStringIndex = true;
                result.stringIndex_ = value;
                return this;
            }

            public Builder clearStringIndex() {
                result.hasStringIndex = false;
                result.stringIndex_ = 0;
                return this;
            }

            // optional int32 font_size = 4 [default = 15];
            public boolean hasFontSize() {
                return result.hasFontSize();
            }

            public int getFontSize() {
                return result.getFontSize();
            }

            public Builder setFontSize(int value) {
                result.hasFontSize = true;
                result.fontSize_ = value;
                return this;
            }

            public Builder clearFontSize() {
                result.hasFontSize = false;
                result.fontSize_ = 15;
                return this;
            }

            // optional float offset = 5 [default = 0.02];
            public boolean hasOffset() {
                return result.hasOffset();
            }

            public float getOffset() {
                return result.getOffset();
            }

            public Builder setOffset(float value) {
                result.hasOffset = true;
                result.offset_ = value;
                return this;
            }

            public Builder clearOffset() {
                result.hasOffset = false;
                result.offset_ = 0.02F;
                return this;
            }

            // @@protoc_insertion_point(builder_scope:stardroid_source.LabelElementProto)
        }

        static {
            defaultInstance = new LabelElementProto(true);
            SourceProto.internalForceInit();
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:stardroid_source.LabelElementProto)
    }

    public static final class LineElementProto extends
            com.google.protobuf.GeneratedMessageLite {
        // Use LineElementProto.newBuilder() to construct.
        private LineElementProto() {
            initFields();
        }

        private LineElementProto(boolean noInit) {
        }

        private static final LineElementProto defaultInstance;

        public static LineElementProto getDefaultInstance() {
            return defaultInstance;
        }

        public LineElementProto getDefaultInstanceForType() {
            return defaultInstance;
        }

        // optional uint32 color = 1 [default = 4294967295];
        public static final int COLOR_FIELD_NUMBER = 1;
        private boolean hasColor;
        private int color_ = -1;

        public boolean hasColor() {
            return hasColor;
        }

        public int getColor() {
            return color_;
        }

        // optional float line_width = 2 [default = 1.5];
        public static final int LINE_WIDTH_FIELD_NUMBER = 2;
        private boolean hasLineWidth;
        private float lineWidth_ = 1.5F;

        public boolean hasLineWidth() {
            return hasLineWidth;
        }

        public float getLineWidth() {
            return lineWidth_;
        }

        // repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;
        public static final int VERTEX_FIELD_NUMBER = 3;
        private java.util.List<GeocentricCoordinatesProto> vertex_ =
                java.util.Collections.emptyList();

        public java.util.List<GeocentricCoordinatesProto> getVertexList() {
            return vertex_;
        }

        public int getVertexCount() {
            return vertex_.size();
        }

        public GeocentricCoordinatesProto getVertex(int index) {
            return vertex_.get(index);
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (hasColor()) {
                output.writeUInt32(1, getColor());
            }
            if (hasLineWidth()) {
                output.writeFloat(2, getLineWidth());
            }
            for (GeocentricCoordinatesProto element : getVertexList()) {
                output.writeMessage(3, element);
            }
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasColor()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, getColor());
            }
            if (hasLineWidth()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(2, getLineWidth());
            }
            for (GeocentricCoordinatesProto element : getVertexList()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, element);
            }
            memoizedSerializedSize = size;
            return size;
        }

        public static LineElementProto parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static LineElementProto parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static LineElementProto parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static LineElementProto parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static LineElementProto parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static LineElementProto parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static LineElementProto parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static LineElementProto parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static LineElementProto parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static LineElementProto parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LineElementProto prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        LineElementProto, Builder> {
            private LineElementProto result;

            // Construct using com.google.android.stardroid.source.proto.SourceProto.LineElementProto.newBuilder()
            private Builder() {
            }

            private static Builder create() {
                Builder builder = new Builder();
                builder.result = new LineElementProto();
                return builder;
            }

            protected LineElementProto internalGetResult() {
                return result;
            }

            public Builder clear() {
                if (result == null) {
                    throw new IllegalStateException(
                            "Cannot call clear() after build().");
                }
                result = new LineElementProto();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(result);
            }

            public LineElementProto getDefaultInstanceForType() {
                return LineElementProto.getDefaultInstance();
            }

            public boolean isInitialized() {
                return result.isInitialized();
            }

            public LineElementProto build() {
                if (result != null && !isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return buildPartial();
            }

            private LineElementProto buildParsed()
                    throws com.google.protobuf.InvalidProtocolBufferException {
                if (!isInitialized()) {
                    throw newUninitializedMessageException(
                            result).asInvalidProtocolBufferException();
                }
                return buildPartial();
            }

            public LineElementProto buildPartial() {
                if (result == null) {
                    throw new IllegalStateException(
                            "build() has already been called on this Builder.");
                }
                if (result.vertex_ != java.util.Collections.EMPTY_LIST) {
                    result.vertex_ =
                            java.util.Collections.unmodifiableList(result.vertex_);
                }
                LineElementProto returnMe = result;
                result = null;
                return returnMe;
            }

            public Builder mergeFrom(LineElementProto other) {
                if (other == LineElementProto.getDefaultInstance()) return this;
                if (other.hasColor()) {
                    setColor(other.getColor());
                }
                if (other.hasLineWidth()) {
                    setLineWidth(other.getLineWidth());
                }
                if (!other.vertex_.isEmpty()) {
                    if (result.vertex_.isEmpty()) {
                        result.vertex_ = new java.util.ArrayList<GeocentricCoordinatesProto>();
                    }
                    result.vertex_.addAll(other.vertex_);
                }
                return this;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                while (true) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            return this;
                        default: {
                            if (!parseUnknownField(input, extensionRegistry, tag)) {
                                return this;
                            }
                            break;
                        }
                        case 8: {
                            setColor(input.readUInt32());
                            break;
                        }
                        case 21: {
                            setLineWidth(input.readFloat());
                            break;
                        }
                        case 26: {
                            GeocentricCoordinatesProto.Builder subBuilder = GeocentricCoordinatesProto.newBuilder();
                            input.readMessage(subBuilder, extensionRegistry);
                            addVertex(subBuilder.buildPartial());
                            break;
                        }
                    }
                }
            }


            // optional uint32 color = 1 [default = 4294967295];
            public boolean hasColor() {
                return result.hasColor();
            }

            public int getColor() {
                return result.getColor();
            }

            public Builder setColor(int value) {
                result.hasColor = true;
                result.color_ = value;
                return this;
            }

            public Builder clearColor() {
                result.hasColor = false;
                result.color_ = -1;
                return this;
            }

            // optional float line_width = 2 [default = 1.5];
            public boolean hasLineWidth() {
                return result.hasLineWidth();
            }

            public float getLineWidth() {
                return result.getLineWidth();
            }

            public Builder setLineWidth(float value) {
                result.hasLineWidth = true;
                result.lineWidth_ = value;
                return this;
            }

            public Builder clearLineWidth() {
                result.hasLineWidth = false;
                result.lineWidth_ = 1.5F;
                return this;
            }

            // repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;
            public java.util.List<GeocentricCoordinatesProto> getVertexList() {
                return java.util.Collections.unmodifiableList(result.vertex_);
            }

            public int getVertexCount() {
                return result.getVertexCount();
            }

            public GeocentricCoordinatesProto getVertex(int index) {
                return result.getVertex(index);
            }

            public Builder setVertex(int index, GeocentricCoordinatesProto value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                result.vertex_.set(index, value);
                return this;
            }

            public Builder setVertex(int index, GeocentricCoordinatesProto.Builder builderForValue) {
                result.vertex_.set(index, builderForValue.build());
                return this;
            }

            public Builder addVertex(GeocentricCoordinatesProto value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                if (result.vertex_.isEmpty()) {
                    result.vertex_ = new java.util.ArrayList<GeocentricCoordinatesProto>();
                }
                result.vertex_.add(value);
                return this;
            }

            public Builder addVertex(GeocentricCoordinatesProto.Builder builderForValue) {
                if (result.vertex_.isEmpty()) {
                    result.vertex_ = new java.util.ArrayList<GeocentricCoordinatesProto>();
                }
                result.vertex_.add(builderForValue.build());
                return this;
            }

            public Builder addAllVertex(
                    Iterable<? extends GeocentricCoordinatesProto> values) {
                if (result.vertex_.isEmpty()) {
                    result.vertex_ = new java.util.ArrayList<GeocentricCoordinatesProto>();
                }
                super.addAll(values, result.vertex_);
                return this;
            }

            public Builder clearVertex() {
                result.vertex_ = java.util.Collections.emptyList();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:stardroid_source.LineElementProto)
        }

        static {
            defaultInstance = new LineElementProto(true);
            SourceProto.internalForceInit();
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:stardroid_source.LineElementProto)
    }

    public static final class AstronomicalSourceProto extends
            com.google.protobuf.GeneratedMessageLite {
        // Use AstronomicalSourceProto.newBuilder() to construct.
        private AstronomicalSourceProto() {
            initFields();
        }

        private AstronomicalSourceProto(boolean noInit) {
        }

        private static final AstronomicalSourceProto defaultInstance;

        public static AstronomicalSourceProto getDefaultInstance() {
            return defaultInstance;
        }

        public AstronomicalSourceProto getDefaultInstanceForType() {
            return defaultInstance;
        }

        // repeated uint32 name_ids = 1;
        public static final int NAME_IDS_FIELD_NUMBER = 1;
        private java.util.List<Integer> nameIds_ =
                java.util.Collections.emptyList();

        public java.util.List<Integer> getNameIdsList() {
            return nameIds_;
        }

        public int getNameIdsCount() {
            return nameIds_.size();
        }

        public int getNameIds(int index) {
            return nameIds_.get(index);
        }

        // optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;
        public static final int SEARCH_LOCATION_FIELD_NUMBER = 2;
        private boolean hasSearchLocation;
        private GeocentricCoordinatesProto searchLocation_;

        public boolean hasSearchLocation() {
            return hasSearchLocation;
        }

        public GeocentricCoordinatesProto getSearchLocation() {
            return searchLocation_;
        }

        // optional float search_level = 3 [default = 0];
        public static final int SEARCH_LEVEL_FIELD_NUMBER = 3;
        private boolean hasSearchLevel;
        private float searchLevel_ = 0F;

        public boolean hasSearchLevel() {
            return hasSearchLevel;
        }

        public float getSearchLevel() {
            return searchLevel_;
        }

        // optional float level = 4 [default = 0];
        public static final int LEVEL_FIELD_NUMBER = 4;
        private boolean hasLevel;
        private float level_ = 0F;

        public boolean hasLevel() {
            return hasLevel;
        }

        public float getLevel() {
            return level_;
        }

        // repeated .stardroid_source.PointElementProto point = 5;
        public static final int POINT_FIELD_NUMBER = 5;
        private java.util.List<PointElementProto> point_ =
                java.util.Collections.emptyList();

        public java.util.List<PointElementProto> getPointList() {
            return point_;
        }

        public int getPointCount() {
            return point_.size();
        }

        public PointElementProto getPoint(int index) {
            return point_.get(index);
        }

        // repeated .stardroid_source.LabelElementProto label = 6;
        public static final int LABEL_FIELD_NUMBER = 6;
        private java.util.List<LabelElementProto> label_ =
                java.util.Collections.emptyList();

        public java.util.List<LabelElementProto> getLabelList() {
            return label_;
        }

        public int getLabelCount() {
            return label_.size();
        }

        public LabelElementProto getLabel(int index) {
            return label_.get(index);
        }

        // repeated .stardroid_source.LineElementProto line = 7;
        public static final int LINE_FIELD_NUMBER = 7;
        private java.util.List<LineElementProto> line_ =
                java.util.Collections.emptyList();

        public java.util.List<LineElementProto> getLineList() {
            return line_;
        }

        public int getLineCount() {
            return line_.size();
        }

        public LineElementProto getLine(int index) {
            return line_.get(index);
        }

        private void initFields() {
            searchLocation_ = GeocentricCoordinatesProto.getDefaultInstance();
        }

        public final boolean isInitialized() {
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            for (int element : getNameIdsList()) {
                output.writeUInt32(1, element);
            }
            if (hasSearchLocation()) {
                output.writeMessage(2, getSearchLocation());
            }
            if (hasSearchLevel()) {
                output.writeFloat(3, getSearchLevel());
            }
            if (hasLevel()) {
                output.writeFloat(4, getLevel());
            }
            for (PointElementProto element : getPointList()) {
                output.writeMessage(5, element);
            }
            for (LabelElementProto element : getLabelList()) {
                output.writeMessage(6, element);
            }
            for (LineElementProto element : getLineList()) {
                output.writeMessage(7, element);
            }
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            {
                int dataSize = 0;
                for (int element : getNameIdsList()) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(element);
                }
                size += dataSize;
                size += 1 * getNameIdsList().size();
            }
            if (hasSearchLocation()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, getSearchLocation());
            }
            if (hasSearchLevel()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(3, getSearchLevel());
            }
            if (hasLevel()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(4, getLevel());
            }
            for (PointElementProto element : getPointList()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(5, element);
            }
            for (LabelElementProto element : getLabelList()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(6, element);
            }
            for (LineElementProto element : getLineList()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(7, element);
            }
            memoizedSerializedSize = size;
            return size;
        }

        public static AstronomicalSourceProto parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static AstronomicalSourceProto parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static AstronomicalSourceProto parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static AstronomicalSourceProto parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static AstronomicalSourceProto parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static AstronomicalSourceProto parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static AstronomicalSourceProto parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static AstronomicalSourceProto parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static AstronomicalSourceProto parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static AstronomicalSourceProto parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(AstronomicalSourceProto prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        AstronomicalSourceProto, Builder> {
            private AstronomicalSourceProto result;

            // Construct using com.google.android.stardroid.source.proto.SourceProto.AstronomicalSourceProto.newBuilder()
            private Builder() {
            }

            private static Builder create() {
                Builder builder = new Builder();
                builder.result = new AstronomicalSourceProto();
                return builder;
            }

            protected AstronomicalSourceProto internalGetResult() {
                return result;
            }

            public Builder clear() {
                if (result == null) {
                    throw new IllegalStateException(
                            "Cannot call clear() after build().");
                }
                result = new AstronomicalSourceProto();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(result);
            }

            public AstronomicalSourceProto getDefaultInstanceForType() {
                return AstronomicalSourceProto.getDefaultInstance();
            }

            public boolean isInitialized() {
                return result.isInitialized();
            }

            public AstronomicalSourceProto build() {
                if (result != null && !isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return buildPartial();
            }

            private AstronomicalSourceProto buildParsed()
                    throws com.google.protobuf.InvalidProtocolBufferException {
                if (!isInitialized()) {
                    throw newUninitializedMessageException(
                            result).asInvalidProtocolBufferException();
                }
                return buildPartial();
            }

            public AstronomicalSourceProto buildPartial() {
                if (result == null) {
                    throw new IllegalStateException(
                            "build() has already been called on this Builder.");
                }
                if (result.nameIds_ != java.util.Collections.EMPTY_LIST) {
                    result.nameIds_ =
                            java.util.Collections.unmodifiableList(result.nameIds_);
                }
                if (result.point_ != java.util.Collections.EMPTY_LIST) {
                    result.point_ =
                            java.util.Collections.unmodifiableList(result.point_);
                }
                if (result.label_ != java.util.Collections.EMPTY_LIST) {
                    result.label_ =
                            java.util.Collections.unmodifiableList(result.label_);
                }
                if (result.line_ != java.util.Collections.EMPTY_LIST) {
                    result.line_ =
                            java.util.Collections.unmodifiableList(result.line_);
                }
                AstronomicalSourceProto returnMe = result;
                result = null;
                return returnMe;
            }

            public Builder mergeFrom(AstronomicalSourceProto other) {
                if (other == AstronomicalSourceProto.getDefaultInstance()) return this;
                if (!other.nameIds_.isEmpty()) {
                    if (result.nameIds_.isEmpty()) {
                        result.nameIds_ = new java.util.ArrayList<Integer>();
                    }
                    result.nameIds_.addAll(other.nameIds_);
                }
                if (other.hasSearchLocation()) {
                    mergeSearchLocation(other.getSearchLocation());
                }
                if (other.hasSearchLevel()) {
                    setSearchLevel(other.getSearchLevel());
                }
                if (other.hasLevel()) {
                    setLevel(other.getLevel());
                }
                if (!other.point_.isEmpty()) {
                    if (result.point_.isEmpty()) {
                        result.point_ = new java.util.ArrayList<PointElementProto>();
                    }
                    result.point_.addAll(other.point_);
                }
                if (!other.label_.isEmpty()) {
                    if (result.label_.isEmpty()) {
                        result.label_ = new java.util.ArrayList<LabelElementProto>();
                    }
                    result.label_.addAll(other.label_);
                }
                if (!other.line_.isEmpty()) {
                    if (result.line_.isEmpty()) {
                        result.line_ = new java.util.ArrayList<LineElementProto>();
                    }
                    result.line_.addAll(other.line_);
                }
                return this;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                while (true) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            return this;
                        default: {
                            if (!parseUnknownField(input, extensionRegistry, tag)) {
                                return this;
                            }
                            break;
                        }
                        case 8: {
                            addNameIds(input.readUInt32());
                            break;
                        }
                        case 10: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            while (input.getBytesUntilLimit() > 0) {
                                addNameIds(input.readUInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 18: {
                            GeocentricCoordinatesProto.Builder subBuilder = GeocentricCoordinatesProto.newBuilder();
                            if (hasSearchLocation()) {
                                subBuilder.mergeFrom(getSearchLocation());
                            }
                            input.readMessage(subBuilder, extensionRegistry);
                            setSearchLocation(subBuilder.buildPartial());
                            break;
                        }
                        case 29: {
                            setSearchLevel(input.readFloat());
                            break;
                        }
                        case 37: {
                            setLevel(input.readFloat());
                            break;
                        }
                        case 42: {
                            PointElementProto.Builder subBuilder = PointElementProto.newBuilder();
                            input.readMessage(subBuilder, extensionRegistry);
                            addPoint(subBuilder.buildPartial());
                            break;
                        }
                        case 50: {
                            LabelElementProto.Builder subBuilder = LabelElementProto.newBuilder();
                            input.readMessage(subBuilder, extensionRegistry);
                            addLabel(subBuilder.buildPartial());
                            break;
                        }
                        case 58: {
                            LineElementProto.Builder subBuilder = LineElementProto.newBuilder();
                            input.readMessage(subBuilder, extensionRegistry);
                            addLine(subBuilder.buildPartial());
                            break;
                        }
                    }
                }
            }


            // repeated uint32 name_ids = 1;
            public java.util.List<Integer> getNameIdsList() {
                return java.util.Collections.unmodifiableList(result.nameIds_);
            }

            public int getNameIdsCount() {
                return result.getNameIdsCount();
            }

            public int getNameIds(int index) {
                return result.getNameIds(index);
            }

            public Builder setNameIds(int index, int value) {
                result.nameIds_.set(index, value);
                return this;
            }

            public Builder addNameIds(int value) {
                if (result.nameIds_.isEmpty()) {
                    result.nameIds_ = new java.util.ArrayList<Integer>();
                }
                result.nameIds_.add(value);
                return this;
            }

            public Builder addAllNameIds(
                    Iterable<? extends Integer> values) {
                if (result.nameIds_.isEmpty()) {
                    result.nameIds_ = new java.util.ArrayList<Integer>();
                }
                super.addAll(values, result.nameIds_);
                return this;
            }

            public Builder clearNameIds() {
                result.nameIds_ = java.util.Collections.emptyList();
                return this;
            }

            // optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;
            public boolean hasSearchLocation() {
                return result.hasSearchLocation();
            }

            public GeocentricCoordinatesProto getSearchLocation() {
                return result.getSearchLocation();
            }

            public Builder setSearchLocation(GeocentricCoordinatesProto value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                result.hasSearchLocation = true;
                result.searchLocation_ = value;
                return this;
            }

            public Builder setSearchLocation(GeocentricCoordinatesProto.Builder builderForValue) {
                result.hasSearchLocation = true;
                result.searchLocation_ = builderForValue.build();
                return this;
            }

            public Builder mergeSearchLocation(GeocentricCoordinatesProto value) {
                if (result.hasSearchLocation() &&
                        result.searchLocation_ != GeocentricCoordinatesProto.getDefaultInstance()) {
                    result.searchLocation_ =
                            GeocentricCoordinatesProto.newBuilder(result.searchLocation_).mergeFrom(value).buildPartial();
                } else {
                    result.searchLocation_ = value;
                }
                result.hasSearchLocation = true;
                return this;
            }

            public Builder clearSearchLocation() {
                result.hasSearchLocation = false;
                result.searchLocation_ = GeocentricCoordinatesProto.getDefaultInstance();
                return this;
            }

            // optional float search_level = 3 [default = 0];
            public boolean hasSearchLevel() {
                return result.hasSearchLevel();
            }

            public float getSearchLevel() {
                return result.getSearchLevel();
            }

            public Builder setSearchLevel(float value) {
                result.hasSearchLevel = true;
                result.searchLevel_ = value;
                return this;
            }

            public Builder clearSearchLevel() {
                result.hasSearchLevel = false;
                result.searchLevel_ = 0F;
                return this;
            }

            // optional float level = 4 [default = 0];
            public boolean hasLevel() {
                return result.hasLevel();
            }

            public float getLevel() {
                return result.getLevel();
            }

            public Builder setLevel(float value) {
                result.hasLevel = true;
                result.level_ = value;
                return this;
            }

            public Builder clearLevel() {
                result.hasLevel = false;
                result.level_ = 0F;
                return this;
            }

            // repeated .stardroid_source.PointElementProto point = 5;
            public java.util.List<PointElementProto> getPointList() {
                return java.util.Collections.unmodifiableList(result.point_);
            }

            public int getPointCount() {
                return result.getPointCount();
            }

            public PointElementProto getPoint(int index) {
                return result.getPoint(index);
            }

            public Builder setPoint(int index, PointElementProto value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                result.point_.set(index, value);
                return this;
            }

            public Builder setPoint(int index, PointElementProto.Builder builderForValue) {
                result.point_.set(index, builderForValue.build());
                return this;
            }

            public Builder addPoint(PointElementProto value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                if (result.point_.isEmpty()) {
                    result.point_ = new java.util.ArrayList<PointElementProto>();
                }
                result.point_.add(value);
                return this;
            }

            public Builder addPoint(PointElementProto.Builder builderForValue) {
                if (result.point_.isEmpty()) {
                    result.point_ = new java.util.ArrayList<PointElementProto>();
                }
                result.point_.add(builderForValue.build());
                return this;
            }

            public Builder addAllPoint(
                    Iterable<? extends PointElementProto> values) {
                if (result.point_.isEmpty()) {
                    result.point_ = new java.util.ArrayList<PointElementProto>();
                }
                super.addAll(values, result.point_);
                return this;
            }

            public Builder clearPoint() {
                result.point_ = java.util.Collections.emptyList();
                return this;
            }

            // repeated .stardroid_source.LabelElementProto label = 6;
            public java.util.List<LabelElementProto> getLabelList() {
                return java.util.Collections.unmodifiableList(result.label_);
            }

            public int getLabelCount() {
                return result.getLabelCount();
            }

            public LabelElementProto getLabel(int index) {
                return result.getLabel(index);
            }

            public Builder setLabel(int index, LabelElementProto value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                result.label_.set(index, value);
                return this;
            }

            public Builder setLabel(int index, LabelElementProto.Builder builderForValue) {
                result.label_.set(index, builderForValue.build());
                return this;
            }

            public Builder addLabel(LabelElementProto value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                if (result.label_.isEmpty()) {
                    result.label_ = new java.util.ArrayList<LabelElementProto>();
                }
                result.label_.add(value);
                return this;
            }

            public Builder addLabel(LabelElementProto.Builder builderForValue) {
                if (result.label_.isEmpty()) {
                    result.label_ = new java.util.ArrayList<LabelElementProto>();
                }
                result.label_.add(builderForValue.build());
                return this;
            }

            public Builder addAllLabel(
                    Iterable<? extends LabelElementProto> values) {
                if (result.label_.isEmpty()) {
                    result.label_ = new java.util.ArrayList<LabelElementProto>();
                }
                super.addAll(values, result.label_);
                return this;
            }

            public Builder clearLabel() {
                result.label_ = java.util.Collections.emptyList();
                return this;
            }

            // repeated .stardroid_source.LineElementProto line = 7;
            public java.util.List<LineElementProto> getLineList() {
                return java.util.Collections.unmodifiableList(result.line_);
            }

            public int getLineCount() {
                return result.getLineCount();
            }

            public LineElementProto getLine(int index) {
                return result.getLine(index);
            }

            public Builder setLine(int index, LineElementProto value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                result.line_.set(index, value);
                return this;
            }

            public Builder setLine(int index, LineElementProto.Builder builderForValue) {
                result.line_.set(index, builderForValue.build());
                return this;
            }

            public Builder addLine(LineElementProto value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                if (result.line_.isEmpty()) {
                    result.line_ = new java.util.ArrayList<LineElementProto>();
                }
                result.line_.add(value);
                return this;
            }

            public Builder addLine(LineElementProto.Builder builderForValue) {
                if (result.line_.isEmpty()) {
                    result.line_ = new java.util.ArrayList<LineElementProto>();
                }
                result.line_.add(builderForValue.build());
                return this;
            }

            public Builder addAllLine(
                    Iterable<? extends LineElementProto> values) {
                if (result.line_.isEmpty()) {
                    result.line_ = new java.util.ArrayList<LineElementProto>();
                }
                super.addAll(values, result.line_);
                return this;
            }

            public Builder clearLine() {
                result.line_ = java.util.Collections.emptyList();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:stardroid_source.AstronomicalSourceProto)
        }

        static {
            defaultInstance = new AstronomicalSourceProto(true);
            SourceProto.internalForceInit();
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:stardroid_source.AstronomicalSourceProto)
    }

    public static final class AstronomicalSourcesProto extends
            com.google.protobuf.GeneratedMessageLite {
        // Use AstronomicalSourcesProto.newBuilder() to construct.
        private AstronomicalSourcesProto() {
            initFields();
        }

        private AstronomicalSourcesProto(boolean noInit) {
        }

        private static final AstronomicalSourcesProto defaultInstance;

        public static AstronomicalSourcesProto getDefaultInstance() {
            return defaultInstance;
        }

        public AstronomicalSourcesProto getDefaultInstanceForType() {
            return defaultInstance;
        }

        // repeated .stardroid_source.AstronomicalSourceProto source = 1;
        public static final int SOURCE_FIELD_NUMBER = 1;
        private java.util.List<AstronomicalSourceProto> source_ =
                java.util.Collections.emptyList();

        public java.util.List<AstronomicalSourceProto> getSourceList() {
            return source_;
        }

        public int getSourceCount() {
            return source_.size();
        }

        public AstronomicalSourceProto getSource(int index) {
            return source_.get(index);
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            for (AstronomicalSourceProto element : getSourceList()) {
                output.writeMessage(1, element);
            }
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            for (AstronomicalSourceProto element : getSourceList()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, element);
            }
            memoizedSerializedSize = size;
            return size;
        }

        public static AstronomicalSourcesProto parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static AstronomicalSourcesProto parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static AstronomicalSourcesProto parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static AstronomicalSourcesProto parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static AstronomicalSourcesProto parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static AstronomicalSourcesProto parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static AstronomicalSourcesProto parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static AstronomicalSourcesProto parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static AstronomicalSourcesProto parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static AstronomicalSourcesProto parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(AstronomicalSourcesProto prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        AstronomicalSourcesProto, Builder> {
            private AstronomicalSourcesProto result;

            // Construct using com.google.android.stardroid.source.proto.SourceProto.AstronomicalSourcesProto.newBuilder()
            private Builder() {
            }

            private static Builder create() {
                Builder builder = new Builder();
                builder.result = new AstronomicalSourcesProto();
                return builder;
            }

            protected AstronomicalSourcesProto internalGetResult() {
                return result;
            }

            public Builder clear() {
                if (result == null) {
                    throw new IllegalStateException(
                            "Cannot call clear() after build().");
                }
                result = new AstronomicalSourcesProto();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(result);
            }

            public AstronomicalSourcesProto getDefaultInstanceForType() {
                return AstronomicalSourcesProto.getDefaultInstance();
            }

            public boolean isInitialized() {
                return result.isInitialized();
            }

            public AstronomicalSourcesProto build() {
                if (result != null && !isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return buildPartial();
            }

            private AstronomicalSourcesProto buildParsed()
                    throws com.google.protobuf.InvalidProtocolBufferException {
                if (!isInitialized()) {
                    throw newUninitializedMessageException(
                            result).asInvalidProtocolBufferException();
                }
                return buildPartial();
            }

            public AstronomicalSourcesProto buildPartial() {
                if (result == null) {
                    throw new IllegalStateException(
                            "build() has already been called on this Builder.");
                }
                if (result.source_ != java.util.Collections.EMPTY_LIST) {
                    result.source_ =
                            java.util.Collections.unmodifiableList(result.source_);
                }
                AstronomicalSourcesProto returnMe = result;
                result = null;
                return returnMe;
            }

            public Builder mergeFrom(AstronomicalSourcesProto other) {
                if (other == AstronomicalSourcesProto.getDefaultInstance()) return this;
                if (!other.source_.isEmpty()) {
                    if (result.source_.isEmpty()) {
                        result.source_ = new java.util.ArrayList<AstronomicalSourceProto>();
                    }
                    result.source_.addAll(other.source_);
                }
                return this;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                while (true) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            return this;
                        default: {
                            if (!parseUnknownField(input, extensionRegistry, tag)) {
                                return this;
                            }
                            break;
                        }
                        case 10: {
                            AstronomicalSourceProto.Builder subBuilder = AstronomicalSourceProto.newBuilder();
                            input.readMessage(subBuilder, extensionRegistry);
                            addSource(subBuilder.buildPartial());
                            break;
                        }
                    }
                }
            }


            // repeated .stardroid_source.AstronomicalSourceProto source = 1;
            public java.util.List<AstronomicalSourceProto> getSourceList() {
                return java.util.Collections.unmodifiableList(result.source_);
            }

            public int getSourceCount() {
                return result.getSourceCount();
            }

            public AstronomicalSourceProto getSource(int index) {
                return result.getSource(index);
            }

            public Builder setSource(int index, AstronomicalSourceProto value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                result.source_.set(index, value);
                return this;
            }

            public Builder setSource(int index, AstronomicalSourceProto.Builder builderForValue) {
                result.source_.set(index, builderForValue.build());
                return this;
            }

            public Builder addSource(AstronomicalSourceProto value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                if (result.source_.isEmpty()) {
                    result.source_ = new java.util.ArrayList<AstronomicalSourceProto>();
                }
                result.source_.add(value);
                return this;
            }

            public Builder addSource(AstronomicalSourceProto.Builder builderForValue) {
                if (result.source_.isEmpty()) {
                    result.source_ = new java.util.ArrayList<AstronomicalSourceProto>();
                }
                result.source_.add(builderForValue.build());
                return this;
            }

            public Builder addAllSource(
                    Iterable<? extends AstronomicalSourceProto> values) {
                if (result.source_.isEmpty()) {
                    result.source_ = new java.util.ArrayList<AstronomicalSourceProto>();
                }
                super.addAll(values, result.source_);
                return this;
            }

            public Builder clearSource() {
                result.source_ = java.util.Collections.emptyList();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:stardroid_source.AstronomicalSourcesProto)
        }

        static {
            defaultInstance = new AstronomicalSourcesProto(true);
            SourceProto.internalForceInit();
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:stardroid_source.AstronomicalSourcesProto)
    }


    static {
    }

    public static void internalForceInit() {
    }

    // @@protoc_insertion_point(outer_class_scope)
}
